#gpxData_old <- "C:/Users/Jasper/Desktop/R projects/gps_algorithm/data/20191109.gpx"
gpxData <- "C:/Users/Jasper/Desktop/R projects/gps_algorithm/data/20191126.gpx"
resDir <- "C:/Users/Jasper/Desktop/R projects/gps_algorithm/results"
setwd(wrkDir)
package_name_string <- c('XML', 'OpenStreetMap',
'lubridate', 'ggmap', 'ggplot2', 'raster', 'sp',
'geosphere', 'gridExtra')
#
for (i in package_name_string) {
#install.packages(i)
library(i,character.only = TRUE)
}
shift.vec <- function (vec, shift) {
if(length(vec) <= abs(shift)) {
rep(NA ,length(vec))
}else{
if (shift >= 0) {
c(rep(NA, shift), vec[1:(length(vec)-shift)]) }
else {
c(vec[(abs(shift)+1):length(vec)], rep(NA, abs(shift))) } } }
options(digits=10)
# Parse the GPX file
library("XML")
pfile <- htmlTreeParse(file = gpxData, error = function(...) {
}, useInternalNodes = T)
# Get all elevations, times and coordinates via the respective xpath
elevations <- as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
times <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
course <- xpathSApply(pfile, path = "//trkpt/course", xmlValue)
times
#gpxData_old <- "C:/Users/Jasper/Desktop/R projects/gps_algorithm/data/20191109.gpx"
gpxData <- "C:/Users/Jasper/Desktop/R projects/gps_algorithm/data/04-11-2019_0.gpx"
resDir <- "C:/Users/Jasper/Desktop/R projects/gps_algorithm/results"
setwd(wrkDir)
pfile <- htmlTreeParse(file = gpxData, error = function(...) {
}, useInternalNodes = T)
elevations <- as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
elevations
times <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
times
head(pfile)
#gpxData_old <- "C:/Users/Jasper/Desktop/R projects/gps_algorithm/data/20191109.gpx"
gpxData <- "C:/Users/Jasper/Desktop/R projects/gps_algorithm/data/04-12-2019_0.gpx"
pfile <- htmlTreeParse(file = gpxData, error = function(...) {
}, useInternalNodes = T)
elevations <- as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
elevations
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
lat_prev <- as.numeric(coords["lat",])
lon_prev <- as.numeric(coords["lon",])
head(lat_prev)
course <- xpathSApply(pfile, path = "//trkpt/bear", xmlValue)
head(course)
course <- as.numeric(xpathSApply(pfile, path = "//trkpt/bear", xmlValue))
head(course)
# set project directories
wrkDir <- "C:/Users/Jasper/Desktop/R projects/gps_algorithm/scripts"
gpxData <- "C:/Users/Jasper/Desktop/R projects/gps_algorithm/data/04-12-2019_0.gpx"
resDir <- "C:/Users/Jasper/Desktop/R projects/gps_algorithm/results"
setwd(wrkDir)
# loading a set of libraries with load_lib (functions installs library if not installed yet
#
package_name_string <- c('XML', 'OpenStreetMap',
'lubridate', 'ggmap', 'ggplot2', 'raster', 'sp',
'geosphere', 'gridExtra')
#
for (i in package_name_string) {
#install.packages(i)
library(i,character.only = TRUE)
}
###############################
### read the gpx data   #######
### 				            #######
###############################
options(digits=10)
# Parse the GPX file
library("XML")
pfile <- htmlTreeParse(file = gpxData, error = function(...) {
}, useInternalNodes = T)
# Get all elevations, times and coordinates via the respective xpath
date <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
date <- date[1]
accuracy <- as.numeric(xpathSApply(pfile, path = "//trkpt/acc", xmlValue))
distance <- as.numeric(xpathSApply(pfile, path = "//trkpt/distance", xmlValue))
elevations <- as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
provider <- xpathSApply(pfile, path = "//trkpt/provider", xmlValue)
time_elapsed <- as.numeric(xpathSApply(pfile, path = "//trkpt/time_elapsed", xmlValue))
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
bearing <- xpathSApply(pfile, path = "//trkpt/bear", xmlValue)
lat_prev <- as.numeric(coords["lat",])
lon_prev <- as.numeric(coords["lon",])
data_set <- data.frame(provider = provider,
accuracy = accuracy,
lat_prev = lat_prev,
lon_prev = lon_prev,
distance = distance,
time_elapsed = time_elapsed,
bearing = bearing
)
len <- nrow(data_set)
data_set <- data_set[data_set$distance != 0, ]
data_set <- unique(data_set)
len <- nrow(data_set)
provider <- data_set$provider
accuracy <- data_set$accuracy
lat_prev <- data_set$lat_prev
lon_prev <- data_set$lon_prev
distance <- data_set$distance
time_elapsed <- data_set$time_elapsed
bearing <- data_set$bearing
setwd(wrkDir)
source("shift.vec.R")
lat_next <- shift.vec(lat_prev, -1)
lon_next <- shift.vec(lon_prev, -1)
time_diff <- sapply(1:len-1, function(x) (shift.vec(time_elapsed, -1)-time_elapsed))[,1]
time_diff <- shift.vec(time_diff,1)
library("raster")
distance_R <- apply(data_set,1, FUN = function (row) {
pointDistance(
c(as.numeric(row["lat_next"]),as.numeric(row["lon_next"])),
c(as.numeric(row["lat_prev"]), as.numeric(row["lon_prev"])),
lonlat = T)
})
distance_R
distance
distance_R <- apply(1:len-1, function(x)  {
pointDistance(
c(as.numeric(lat_next),as.numeric(lon_next)),
c(as.numeric(lat_prev), as.numeric(lon_prev)),
lonlat = T)
})
distance_R <- sapply(1:len-1, function(x)  {
pointDistance(
c(as.numeric(lat_next),as.numeric(lon_next)),
c(as.numeric(lat_prev), as.numeric(lon_prev)),
lonlat = T)
})
distance_R <- sapply(1:len-1, function(x) (
pointDistance(
c(as.numeric(lat_prev),as.numeric(lon_prev)),
c(as.numeric(lat_next),as.numeric(lon_next)),
lonlat = T)
))
dis
distance_R <- sapply(1:len-1, function(x) (
pointDistance(
c(as.numeric(lat_prev),as.numeric(lon_prev)),
c(as.numeric(lat_next),as.numeric(lon_next)),
lonlat = T)
))
distance_R <- sapply(1:len-1, function(row) (
pointDistance(
c(as.numeric(lat_prev),as.numeric(lon_prev)),
c(as.numeric(lat_next),as.numeric(lon_next)),
lonlat = T)
))
distance_R <- sapply(1:len-1, function(x) (
pointDistance(
c(as.numeric(lat_prev[x]),as.numeric(lon_prev[x])),
c(as.numeric(lat_next[x]),as.numeric(lon_next[x])),
lonlat = T)
))
pointDistance(
c(as.numeric(lat_prev[1]),as.numeric(lon_prev)[1]),
c(as.numeric(lat_next[1]),as.numeric(lon_next)[1]),
lonlat = T)
)
pointDistance(
c(as.numeric(lat_prev[1]),as.numeric(lon_prev)[1]),
c(as.numeric(lat_next[1]),as.numeric(lon_next)[1]),
lonlat = T)
pointDistance(
c(as.numeric(lat_prev),as.numeric(lon_prev)),
c(as.numeric(lat_next),as.numeric(lon_next)),
lonlat = T)
data_set$lat_next <- lat_next
data_set$lon_next <- lon_next
distance_R <- apply(data_set,1, function(row) (
pointDistance(
c(as.numeric(data_set$lat_prev[row]),as.numeric(data_set$lon_prev[row])),
c(as.numeric(data_set$lat_next[row]),as.numeric(data_set$lon_next[row])),
lonlat = T)
))
head(data_set)
distance_R <- apply(data_set,1, function(row) (
pointDistance(
c(as.numeric(data_set$lat_prev[row]),as.numeric(data_set$lon_prev[row])),
c(as.numeric(data_set$lat_next[row]),as.numeric(data_set$lon_next[row])),
lonlat = F)
))
distance_R <- apply(data_set,1, FUN = function (row) {
pointDistance(
c(as.numeric(data_set$lat_prev[row]),as.numeric(data_set$lon_prev[row])),
c(as.numeric(data_set$lat_next[row]),as.numeric(data_set$lon_next[row])),
lonlat = F)
})
distance_R <- apply(data_set,1, FUN = function (row) {
pointDistance(
c(as.numeric(row["lat_prev"]),as.numeric(row["lon_prev"])),
c(as.numeric(row["lat_next"]),as.numeric(row["lon_next"])),
lonlat = F)
})
distance_R
# set project directories
wrkDir <- "C:/Users/Jasper/Desktop/R projects/gps_algorithm/scripts"
gpxData <- "C:/Users/Jasper/Desktop/R projects/gps_algorithm/data/04-12-2019_0.gpx"
resDir <- "C:/Users/Jasper/Desktop/R projects/gps_algorithm/results"
setwd(wrkDir)
# loading a set of libraries with load_lib (functions installs library if not installed yet
#
package_name_string <- c('XML', 'OpenStreetMap',
'lubridate', 'ggmap', 'ggplot2', 'raster', 'sp',
'geosphere', 'gridExtra')
#
for (i in package_name_string) {
#install.packages(i)
library(i,character.only = TRUE)
}
###############################
### read the gpx data   #######
### 				            #######
###############################
options(digits=10)
# Parse the GPX file
library("XML")
pfile <- htmlTreeParse(file = gpxData, error = function(...) {
}, useInternalNodes = T)
# Get all elevations, times and coordinates via the respective xpath
date <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
date <- date[1]
accuracy <- as.numeric(xpathSApply(pfile, path = "//trkpt/acc", xmlValue))
distance <- as.numeric(xpathSApply(pfile, path = "//trkpt/distance", xmlValue))
elevations <- as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
provider <- xpathSApply(pfile, path = "//trkpt/provider", xmlValue)
time_elapsed <- as.numeric(xpathSApply(pfile, path = "//trkpt/time_elapsed", xmlValue))
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
bearing <- xpathSApply(pfile, path = "//trkpt/bear", xmlValue)
lat_prev <- as.numeric(coords["lat",])
lon_prev <- as.numeric(coords["lon",])
data_set <- data.frame(provider = provider,
accuracy = accuracy,
lat_prev = lat_prev,
lon_prev = lon_prev,
distance = distance,
time_elapsed = time_elapsed,
bearing = bearing
)
len <- nrow(data_set)
data_set <- data_set[data_set$distance != 0, ]
data_set <- unique(data_set)
len <- nrow(data_set)
provider <- data_set$provider
accuracy <- data_set$accuracy
lat_prev <- data_set$lat_prev
lon_prev <- data_set$lon_prev
distance <- data_set$distance
time_elapsed <- data_set$time_elapsed
bearing <- data_set$bearing
setwd(wrkDir)
source("shift.vec.R")
lat_next <- shift.vec(lat_prev, -1)
lon_next <- shift.vec(lon_prev, -1)
data_set$lat_next <- lat_next
data_set$lon_next <- lon_next
time_diff <- sapply(1:len-1, function(x) (shift.vec(time_elapsed, -1)-time_elapsed))[,1]
time_diff <- shift.vec(time_diff,1)
# calculate distance in meters between two meassurements
library("raster")
distance_R <- apply(data_set,1, FUN = function (row) {
pointDistance(
c(as.numeric(row["lat_prev"]),as.numeric(row["lon_prev"])),
c(as.numeric(row["lat_next"]),as.numeric(row["lon_next"])),
lonlat = F)
})
distance_R
# calculate distance in meters between two meassurements
library("raster")
distance_R <- apply(data_set,1, FUN = function (row) {
pointDistance(
c(as.numeric(row["lat_prev"]),as.numeric(row["lon_prev"])),
c(as.numeric(row["lat_next"]),as.numeric(row["lon_next"])),
lonlat = F)
})
distance_R
bearing
data_set$distance_R <- apply(data_set,1, FUN = function (row) {
pointDistance(
c(as.numeric(row["lat_prev"]),as.numeric(row["lon_prev"])),
c(as.numeric(row["lat_next"]),as.numeric(row["lon_next"])),
lonlat = F)
})
data_set
speed <- sapply(1:len-1, function (x)
(as.numeric(distance)/as.numeric(time_diff))*1000000000
)[,1]
speed
data_set$distance_R <- apply(data_set,1, FUN = function (row) {
pointDistance(
c(as.numeric(row["lon_prev"]),as.numeric(row["lat_prev"])),
c(as.numeric(row["lon_next"]),as.numeric(row["lat_next"])),
lonlat = F)
})
data_set$distance_R
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
str(coords)
lat_prev <- as.numeric(coords["lat",])
lon_prev <- as.numeric(coords["lon",])
data_set <- data.frame(provider = provider,
accuracy = accuracy,
lat_prev = lat_prev,
lon_prev = lon_prev,
distance = distance,
time_elapsed = time_elapsed,
bearing = bearing
)
len <- nrow(data_set)
data_set <- data_set[data_set$distance != 0, ]
data_set <- unique(data_set)
len <- nrow(data_set)
options(digits=10)
# Parse the GPX file
library("XML")
pfile <- htmlTreeParse(file = gpxData, error = function(...) {
}, useInternalNodes = T)
# Get all elevations, times and coordinates via the respective xpath
date <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
date <- date[1]
accuracy <- as.numeric(xpathSApply(pfile, path = "//trkpt/acc", xmlValue))
distance <- as.numeric(xpathSApply(pfile, path = "//trkpt/distance", xmlValue))
elevations <- as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
provider <- xpathSApply(pfile, path = "//trkpt/provider", xmlValue)
time_elapsed <- as.numeric(xpathSApply(pfile, path = "//trkpt/time_elapsed", xmlValue))
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
bearing <- xpathSApply(pfile, path = "//trkpt/bear", xmlValue)
str(coords)
lat_prev <- as.numeric(coords["lat",])
lon_prev <- as.numeric(coords["lon",])
data_set <- data.frame(provider = provider,
accuracy = accuracy,
lat_prev = lat_prev,
lon_prev = lon_prev,
distance = distance,
time_elapsed = time_elapsed,
bearing = bearing
)
len <- nrow(data_set)
data_set <- data_set[data_set$distance != 0, ]
data_set <- unique(data_set)
len <- nrow(data_set)
provider <- data_set$provider
accuracy <- data_set$accuracy
lat_prev <- data_set$lat_prev
lon_prev <- data_set$lon_prev
distance <- data_set$distance
time_elapsed <- data_set$time_elapsed
bearing <- data_set$bearing
setwd(wrkDir)
source("shift.vec.R")
lat_next <- shift.vec(lat_prev, -1)
lon_next <- shift.vec(lon_prev, -1)
data_set$lat_next <- lat_next
data_set$lon_next <- lon_next
time_diff <- sapply(1:len-1, function(x) (shift.vec(time_elapsed, -1)-time_elapsed))[,1]
time_diff <- shift.vec(time_diff,1)
# calculate distance in meters between two meassurements
library("raster")
data_set$distance_R <- apply(data_set,1, FUN = function (row) {
pointDistance(
c(as.numeric(row["lon_prev"]),as.numeric(row["lat_prev"])),
c(as.numeric(row["lon_next"]),as.numeric(row["lat_next"])),
lonlat = F)
})
data_set
library("geosphere")
pointDistance(
c(as.numeric(lat_prev[1]),as.numeric(lon_prev[1])),
c(as.numeric(lat_next[1]),as.numeric(lon_next[1])),
lonlat = F)
distance[1]
pointDistance(
c(as.numeric(lon_prev[1]),as.numeric(lat_prev[1])),
c(as.numeric(lon_next[1]),as.numeric(lat_next[1])),
lonlat = F)
distm(
c(as.numeric(lon_prev[1]),as.numeric(lat_prev[1])),
c(as.numeric(lon_next[1]),as.numeric(lat_next[1])),
fun = distHaversine)
distance
data_set$distance_R <- apply(data_set,1, FUN = function (row) {
distm(
c(as.numeric(row["lon_prev"]),as.numeric(row["lat_prev"])),
c(as.numeric(row["lon_next"]),as.numeric(row["lat_next"])),
fun = distHaversine)
})
data_set
distance_R <- apply(data_set,1, FUN = function (row) {
distm(
c(as.numeric(row["lon_prev"]),as.numeric(row["lat_prev"])),
c(as.numeric(row["lon_next"]),as.numeric(row["lat_next"])),
fun = distHaversine)
})
distance_R
distance_R <- shift.vec(distance_R,1)
bearing_calc_A_R <- calculate_bearing_from_coords(lat_prev, lat_next, lon_prev, lon_next)
source("calculate_bearing_from_coords.R")   # need package   pracma
library("pracma")
bearing_calc_A_R <- calculate_bearing_from_coords(lat_prev, lat_next, lon_prev, lon_next)
bearing_calc_A_R
speed <- sapply(1:len-1, function (x)
(as.numeric(distance)/as.numeric(time_diff))*1000000000
)[,1]
speed
speed_R <- sapply(1:len-1, function (x)
(as.numeric(distance_R)/as.numeric(time_diff))*1000000000
)[,1]
speed_R
data_set <- data.frame(provider = provider,
accuracy = accuracy,
lat_prev = lat_prev, lat_next = lat_next,
lon_prev = lon_prev, lon_next = lon_next,
distance = distance,
distance_R = distance_R,
time_elapsed = time_elapsed,
time_diff = time_diff,
speed = speed,
speed_R = speed_R,
bearing = bearing,
bearing_calc_A_R = bearing_calc_A_R)
data_set
library("gridExtra")
resDir <- "C:/Users/Jasper/Desktop/R projects/gps_algorithm/results"
setwd(resDir)
png("data_set.png", height = 50*nrow(data_set), width = 200*ncol(data_set))
grid.table(data_set)
dev.off()
total_distance <-
distm(
c(as.numeric(lon_prev[1]),as.numeric(lat_prev[1])),
c(as.numeric(lon_prev[len]),as.numeric(lat_prev[len])),
fun = distHaversine)
total_distance
total_time <- sum(time_diff)
total_time
time_diff
total_time <- sum(time_diff,na.rm = T)
total_time
total_time <- sum(time_diff,na.rm = T)/1000000000
total_time
total_time2 <- (time_elapsed[len]-time_elapsed[1])/1000000000
total_time2
avg_speed <- total_distance/total_time
avg_speed
median(speed)
median(speed,na.rm=T)
mean(speed,na.rm=T)
median_speed <- median(speed,na.rm=T)
mean_speed <- mean(speed,na.rm=T)
,na.rm=T
median_speed_R <- median(speed_R,na.rm=T)
mean_speed_R <- mean(speed_R,na.rm=T)
median_speed
mean_speed
median_speed_R
mean_speed_R
avg_speed
speed_expected <- total_distance/total_time
speed_expected
median_speed_R
