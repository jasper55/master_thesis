col=c("blue", "black", "green")
)
dev.off()
setwd(resDir)
graphics.off()
png(filename = paste("data_intervall_1_20_coords_timeDiff_distance__",data_set_name,".png",sep=""), width = 7, height = 7, units = "in", res = 75)
plot(lon_prev[1:20],lat_prev[1:20],asp=1,col="blue")
par(new=TRUE)
plot(time_diff[1:20]/100000000,type="l",col="black", ylim=c(0,13))
par(new=TRUE)
plot(distance_R[1:20],type="l",col="green")
legend('topleft',
c("coordinates","time difference","distance"),
col=c("blue", "black", "green"),
lty=1:3, cex=0.8
)
dev.off()
graphics.off()
png(filename = paste("data_intervall_1_20_coords_timeDiff_distance__",data_set_name,".png",sep=""), width = 7, height = 7, units = "in", res = 75)
plot(lon_prev[1:20],lat_prev[1:20],asp=1,col="blue")
par(new=TRUE)
plot(time_diff[1:20]/100000000,type="l",col="black", ylim=c(0,13))
par(new=TRUE)
plot(distance_R[1:20],type="l",col="green")
legend('topleft',
c("coordinates","time difference","distance"),
col=c("blue", "black", "green"),
lty=c("p","l","l"), cex=0.8
)
dev.off()
graphics.off()
png(filename = paste("data_intervall_1_20_coords_timeDiff_distance__",data_set_name,".png",sep=""), width = 7, height = 7, units = "in", res = 75)
plot(lon_prev[1:20],lat_prev[1:20],asp=1,col="blue")
par(new=TRUE)
plot(time_diff[1:20]/100000000,type="l",col="black", ylim=c(0,13))
par(new=TRUE)
plot(distance_R[1:20],type="l",col="green")
legend('topleft',
c("coordinates","time difference","distance"),
col=c("blue", "black", "green"),
lty=c(1,3,4), cex=0.8
)
dev.off()
graphics.off()
png(filename = paste("data_intervall_1_20_coords_timeDiff_distance__",data_set_name,".png",sep=""), width = 7, height = 7, units = "in", res = 75)
plot(lon_prev[1:20],lat_prev[1:20],asp=1,col="blue",pch = 19)
par(new=TRUE)
plot(time_diff[1:20]/100000000,type="l",col="black", ylim=c(0,13),lty = 1)
par(new=TRUE)
plot(distance_R[1:20],type="l",col="green",lty = 2)
legend('topleft',
c("coordinates","time difference","distance"),
col=c("blue", "black", "green"),
pch = c(19, NA, NA),
lty=c(NA,1,2), cex=0.8
)
dev.off()
setwd(resDir)
graphics.off()
png(filename = paste("data_intervall_1_20_coords_timeDiff_distance__",data_set_name,".png",sep=""), width = 7, height = 7, units = "in", res = 75)
plot(lon_prev[1:20],lat_prev[1:20],asp=1,col="blue",pch = 19)
par(new=TRUE)
plot(time_diff[2:21]/100000000,type="l",col="black", ylim=c(0,13),lty = 1)
par(new=TRUE)
plot(distance_R[2:21],type="l",col="green",lty = 2)
legend('topleft',
c("coordinates","time difference","distance"),
col=c("blue", "black", "green"),
pch = c(19, NA, NA),
lty=c(NA,1,2), cex=0.8
)
dev.off()
graphics.off()
png(filename = paste("data_intervall_1_20_coords_timeDiff_distance__",data_set_name,".png",sep=""), width = 7, height = 7, units = "in", res = 75)
plot(lon_prev[1:20],lat_prev[1:20],asp=1,col="blue",pch = 19)
par(new=TRUE)
plot(time_diff[2:21]/100000000,type="l",col="black", ylim=c(0,13),lty = 1)
par(new=TRUE)
plot(distance_R[2:21],type="l",col="green",lty = 2)
legend('topleft',
c("coordinates","time difference","distance"),
col=c("blue", "black", "green"),
pch = c(19, NA, NA),
lty=c(NA,1,2),
cex=0.8
)
dev.off()
graphics.off()
png(filename = paste("data_intervall_1_20_coords_relative_distance__",data_set_name,".png",sep=""), width = 7, height = 7, units = "in", res = 75)
plot(lon_prev[1:20],lat_prev[1:20],asp=1,col="blue",pch = 19)
par(new=TRUE)
plot(distance_R[2:21]/(time_diff[2:21]/1000000000),type="l",col="green",lty = 2)
legend('topleft',
c("coordinates","time difference","distance"),
col=c("blue", "black", "green"),
pch = c(19, NA),
lty=c(NA,2),
cex=0.8
)
dev.off()
graphics.off()
png(filename = paste("data_intervall_1_20_coords_relative_distance__",data_set_name,".png",sep=""), width = 7, height = 7, units = "in", res = 75)
plot(lon_prev[1:20],lat_prev[1:20],asp=1,col="blue",pch = 19)
par(new=TRUE)
plot(distance_R[2:21]/(time_diff[2:21]/1000000000),type="l",col="green",lty = 2)
legend('topleft',
c("coordinates","relative distance"),
col=c("blue","green"),
pch = c(19, NA),
lty=c(NA,2),
cex=0.8
)
dev.off()
head(data_set)
# set project directories
wrkDir <- "D:/Backup/01_Masterarbeit/master_thesis/R/scripts"
gpxData <- "D:/Backup/01_Masterarbeit/master_thesis/R/data/04-12-2019_0.gpx"
resDir <- "D:/Backup/01_Masterarbeit/master_thesis/R/results"
funDir <- "D:/Backup/01_Masterarbeit/master_thesis/R/scripts/functions"
data_set_name <- "04-12-2019_0"
setwd(wrkDir)
# loading a set of libraries with load_lib (functions installs library if not installed yet
#
package_name_string <- c('XML', 'OpenStreetMap',
'lubridate', 'ggmap', 'ggplot2', 'raster', 'sp',
'geosphere', 'gridExtra')
#
for (i in package_name_string) {
#install.packages(i)
library(i,character.only = TRUE)
}
###############################
### read the gpx data   #######
### 				            #######
###############################
options(digits=10)
# Parse the GPX file
library("XML")
pfile <- htmlTreeParse(file = gpxData, error = function(...) {
}, useInternalNodes = T)
# Get all elevations, times and coordinates via the respective xpath
date <- xpathSApply(pfile, path = "//trkpt/time", xmlValue)
date <- date[1]
accuracy <- as.numeric(xpathSApply(pfile, path = "//trkpt/acc", xmlValue))
distance <- as.numeric(xpathSApply(pfile, path = "//trkpt/distance", xmlValue))
elevations <- as.numeric(xpathSApply(pfile, path = "//trkpt/ele", xmlValue))
provider <- xpathSApply(pfile, path = "//trkpt/provider", xmlValue)
time_elapsed <- as.numeric(xpathSApply(pfile, path = "//trkpt/time_elapsed", xmlValue))
coords <- xpathSApply(pfile, path = "//trkpt", xmlAttrs)
bearing <- xpathSApply(pfile, path = "//trkpt/bear", xmlValue)
str(coords)
lat_prev <- as.numeric(coords["lat",])
lon_prev <- as.numeric(coords["lon",])
data_set <- data.frame(provider = provider,
accuracy = accuracy,
lat_prev = lat_prev,
lon_prev = lon_prev,
distance = distance,
time_elapsed = time_elapsed,
bearing = bearing
)
len <- nrow(data_set)
data_set <- data_set[data_set$distance != 0, ]
data_set <- unique(data_set)
# delete first 35 values as accurcy is very inaccurate
N <- 35
data_set <- data_set[-(1:N), , drop = FALSE]
len <- nrow(data_set)
provider <- data_set$provider
accuracy <- data_set$accuracy
lat_prev <- data_set$lat_prev
lon_prev <- data_set$lon_prev
distance <- data_set$distance
time_elapsed <- data_set$time_elapsed
bearing <- data_set$bearing
setwd(funDir)
source("shift.vec.R")
lat_next <- shift.vec(lat_prev, -1)
lon_next <- shift.vec(lon_prev, -1)
data_set$lat_next <- lat_next
data_set$lon_next <- lon_next
time_diff <- sapply(1:len-1, function(x) (shift.vec(time_elapsed, -1)-time_elapsed))[,1]
head(time_diff)
time_diff <- shift.vec(time_diff,1)
# calculate distance in meters between two meassurements
library("geosphere")
distance_R <- apply(data_set,1, FUN = function (row) {
distm(
c(as.numeric(row["lon_prev"]),as.numeric(row["lat_prev"])),
c(as.numeric(row["lon_next"]),as.numeric(row["lat_next"])),
fun = distVincentyEllipsoid)
})
distance_R <- shift.vec(distance_R,1)
head(data_set)
## set first values to NA
bearing[1] <- NA
distance[1] <- NA
time_elapsed[1] <- NA
data_set <- data.frame(provider = provider,
accuracy = accuracy,
lat_prev = lat_prev, lat_next = lat_next,
lon_prev = lon_prev, lon_next = lon_next,
distance = distance,
distance_R = distance_R,
time_elapsed = time_elapsed,
time_diff = time_diff,
speed = speed,
speed_R = speed_R,
bearing = bearing,
bearing_calc_A_R = bearing_calc_A_R)
head(data_set)
bearing_calc_A_R <- shift.vec(bearing_calc_A_R,1)
speed <- shift.vec(speed,1)
speed_R <- shift.vec(speed_R,1)
speed <- shift.vec(speed,1)
data_set <- data.frame(provider = provider,
accuracy = accuracy,
lat_prev = lat_prev, lat_next = lat_next,
lon_prev = lon_prev, lon_next = lon_next,
distance = distance,
distance_R = distance_R,
time_elapsed = time_elapsed,
time_diff = time_diff,
speed = speed,
speed_R = speed_R,
bearing = bearing,
bearing_calc_A_R = bearing_calc_A_R)
head(data_set)
speed <- sapply(1:len-1, function (x)
(as.numeric(distance)/as.numeric(time_diff))*1000000000
)[,1]
speed <- shift.vec(speed,1)
data_set <- data.frame(provider = provider,
accuracy = accuracy,
lat_prev = lat_prev, lat_next = lat_next,
lon_prev = lon_prev, lon_next = lon_next,
distance = distance,
distance_R = distance_R,
time_elapsed = time_elapsed,
time_diff = time_diff,
speed = speed,
speed_R = speed_R,
bearing = bearing,
bearing_calc_A_R = bearing_calc_A_R)
head(data_set)
speed <- sapply(1:len-1, function (x)
(as.numeric(distance)/as.numeric(time_diff))*1000000000
)[,1]
speed_R <- sapply(1:len-1, function (x)
(as.numeric(distance_R)/as.numeric(time_diff))*1000000000
)[,1]
speed_R <- shift.vec(speed_R,1)
data_set <- data.frame(provider = provider,
accuracy = accuracy,
lat_prev = lat_prev, lat_next = lat_next,
lon_prev = lon_prev, lon_next = lon_next,
distance = distance,
distance_R = distance_R,
time_elapsed = time_elapsed,
time_diff = time_diff,
speed = speed,
speed_R = speed_R,
bearing = bearing,
bearing_calc_A_R = bearing_calc_A_R)
head(data_set)
speed_R <- sapply(1:len-1, function (x)
(as.numeric(distance_R)/as.numeric(time_diff))*1000000000
)[,1]
data_set <- data.frame(provider = provider,
accuracy = accuracy,
lat_prev = lat_prev, lat_next = lat_next,
lon_prev = lon_prev, lon_next = lon_next,
distance = distance,
distance_R = distance_R,
time_elapsed = time_elapsed,
time_diff = time_diff,
speed = speed,
speed_R = speed_R,
bearing = bearing,
bearing_calc_A_R = bearing_calc_A_R)
head(data_set)
setwd(funDir)
source("calculate_bearing_from_LR.R")
bearing_from_LR <- calculate_bearing_from_LR(lon_prev,lat_prev)
bearing_from_LR
head(data_set)
bearing_from_LR_start_end <- calculate_bearing_from_LR(lon_prev,lat_prev)
len <- nrow(data_set)
expected_bearing <- calculate_bearing_from_coords(lat_prev[1],lat_prev[len],lon_prev[1],lon_prev[len])
expected_bearing
bearing_from_LR_start_end
total_distance <-
distm(
c(as.numeric(lon_prev[1]),as.numeric(lat_prev[1])),
c(as.numeric(lon_prev[len]),as.numeric(lat_prev[len])),
fun = distVincentyEllipsoid)
total_time <- sum(time_diff,na.rm = T)/1000000000
speed_expected <- total_distance/total_time
speed_expected
mean_current_speed <- round(mean(speed,na.rm=T),2)
mean_current_speed <- round(mean(speed,na.rm=T),2)
median_current_speed = round(median(speed,na.rm=T),2)
median_speed_distance_R = round(median(speed_R,na.rm=T),2)
mean_current_speed
median_current_speed
median_speed_distance_R
median_current_speed_R = round(median(speed_R,na.rm=T),2)
mean_bearing <- round(mean(as.numeric(bearing),na.rm=T),2)
median_bearing <- round(median(as.numeric(bearing),na.rm=T),2)
median_bearing_coords <- round(median(bearing_calc_A_R,na.rm=T),2)
mean_bearing
median_bearing
median_bearing_coords
data_set
plot(bearing,col="blue",pch = 19)
par(new=TRUE)
plot(bearing_calc_A_R,col="black",pch = 19)
plot(bearing,col="blue",pch = 19)
plot(bearing_calc_A_R,col="black",pch = 19)
bearing
bearing_calc_A_R
min(bearing)
min(as.numeric(bearing))
min(as.numeric(bearing),na.rm=T)
max(as.numeric(bearing),na.rm=T)
max(as.numeric(bearing_calc_A_R),na.rm=T)
min(as.numeric(bearing_calc_A_R),na.rm=T)
plot(bearing_calc_A_R,col="black",pch = 19)
par(new=TRUE)
plot(accuracy,col="blue",pch = 19)
plot(bearing_calc_A_R,col="black",pch = 19)
par(new=TRUE)
plot(accuracy,col="blue",pch = 19)
par(new=TRUE)
plot(lon_prev[1:20],lat_prev[1:20],asp=1,col="red",pch = 19)
plot(bearing_calc_A_R,col="black",pch = 19)
par(new=TRUE)
plot(accuracy,col="blue",pch = 19)
par(new=TRUE)
plot(lon_prev,lat_prev,asp=1,col="red",pch = 19)
lon_prev[1:20]
plot(lon_prev[1:20],lat_prev[1:20],asp=1,col="blue",pch = 19)
plot(accuracy)
plot(bearing_calc_A_R,col="black",pch = 19)
plot(bearing_calc_A_R,col="black",pch = 19)
par(new=TRUE)
plot(distance,col="blue",pch = 19)
plot(bearing,col="blue",pch = 19)
plot(as.numeric(bearing),col="blue",pch = 19)
par(new=TRUE)
plot(bearing_calc_A_R,col="black",pch = 19)
plot(as.numeric(bearing),col="blue",pch = 19)
plot(bearing_calc_A_R,col="black",pch = 19)
plot(as.numeric(bearing),col="blue",pch = 19)
abline(bearing_calc_A_R,col="black",pch = 19)
plot(as.numeric(bearing),col="blue",pch = 19)
lines(bearing_calc_A_R,col="black",pch = 19)
lines(bearing_calc_A_R,col="black",pch = 19)
par(new=TRUE)
plot(distance,col="blue",pch = 19)
plot(bearing_calc_A_R,col="black",pch = 19)
par(new=TRUE)
plot(distance,col="blue",pch = 19)
plot(bearing_calc_A_R,col="black",pch = 19)
par(new=TRUE)
lines(distance,col="blue",pch = 19)
plot(bearing_calc_A_R,col="black",pch = 19)
par(new=TRUE)
plot(distance,col="blue",pch = 19)
plot(as.numeric(bearing),col="blue",pch = 19)
lines(bearing_calc_A_R,col="black",pch = 19)
plot(as.numeric(bearing),col="blue",pch = 19)
lines(bearing_calc_A_R,col="black",pch = 19)
par(new=TRUE)
plot(accuracy,col="red",pch = 19)
plot(as.numeric(bearing),col="blue",pch = 19)
lines(bearing_calc_A_R,col="black",pch = 19)
par(new=TRUE)
plot(accuracy,col="red",pch = 21)
plot(as.numeric(bearing),col="blue",pch = 19)
lines(bearing_calc_A_R,col="black",pch = 19)
par(new=TRUE)
plot(accuracy,col="red",pch = 23)
plot(as.numeric(bearing),col="blue",pch = 17)
lines(bearing_calc_A_R,col="black",pch = 19)
par(new=TRUE)
plot(accuracy,col="red",pch = 21)
plot(as.numeric(bearing),col="blue",pch = 19)
lines(bearing_calc_A_R,col="black")
par(new=TRUE)
plot(accuracy,col="red",pch = 21)
plot(as.numeric(bearing),col="blue",pch = 19)
lines(bearing_calc_A_R,col="black")
par(new=TRUE)
plot(accuracy,col="red",pch = 21)
legend('topleft',
c("bearing_Android","bearing_R","accuracy"),
col=c("blue","black","red"),
pch = c(19, NA,21),
lty=c(NA,1,NA),
cex=0.8
)
setwd(resDir)
graphics.off()
png(filename = paste("compare_bearings__",data_set_name,".png",sep=""), width = 7, height = 7, units = "in", res = 75)
plot(as.numeric(bearing),col="blue",pch = 19)
lines(bearing_calc_A_R,col="black")
par(new=TRUE)
plot(accuracy,col="red",pch = 21)
title(main="compare bearing of Andorid with R", sub="both estimtated with same formula")
legend('topleft',
c("bearing_Android","bearing_R","accuracy"),
col=c("blue","black","red"),
pch = c(19, NA,21),
lty=c(NA,1,NA),
cex=0.8
)
dev.off()
setwd(resDir)
graphics.off()
png(filename = paste("compare_bearings__",data_set_name,".png",sep=""), width = 7, height = 7, units = "in", res = 75)
plot(as.numeric(bearing),col="blue",pch = 19)
lines(bearing_calc_A_R,col="black")
par(new=TRUE)
plot(accuracy,col="red",pch = 21)
title(main="compare bearing of Andorid with R", sub="both estimtated with same formula")
legend('topleft',
c("bearing_Android","bearing_R","accuracy"),
col=c("blue","black","red"),
pch = c(19, NA,21),
lty=c(NA,1,NA),
cex=0.8
)
dev.off()
graphics.off()
png(filename = paste("distance_timeDiff_accuracy__",data_set_name,".png",sep=""), width = 7, height = 7, units = "in", res = 75)
plot(as.numeric(distance),col="blue",pch = 21)
par(new=TRUE)
plot(time_diff,col="black",pch = 21)
par(new=TRUE)
plot(accuracy,col="red",lty=1)
title(main="compare distance, timeDiff and accuracy")
legend('topleft',
c("bearing_Android","bearing_R","accuracy"),
col=c("blue","black","red"),
pch = c(21,21,NA),
lty=c(NA,NA,1),
cex=0.8
)
dev.off()
graphics.off()
png(filename = paste("distance_timeDiff_accuracy__",data_set_name,".png",sep=""), width = 7, height = 7, units = "in", res = 75)
plot(as.numeric(distance),col="blue",pch = 21)
par(new=TRUE)
plot(time_diff,col="black",pch = 21)
par(new=TRUE)
plot(accuracy,col="red",lty=1,pch = 21)
title(main="compare distance, timeDiff and accuracy")
legend('topleft',
c("distance","time_diff","accuracy"),
col=c("blue","black","red"),
pch = c(21,21,NA),
lty=c(NA,NA,1),
cex=0.8
)
dev.off()
plot(as.numeric(distance),col="blue",lty=1)
par(new=TRUE)
plot(time_diff,col="black",lty=1)
par(new=TRUE)
plot(accuracy,col="red",lty=1)
title(main="compare distance, timeDiff and accuracy")
legend('topleft',
c("distance","time_diff","accuracy"),
col=c("blue","black","red"),
pch = c(21,21,NA),
lty=c(NA,NA,1),
cex=0.8
)
dev.off()
graphics.off()
png(filename = paste("distance_timeDiff_accuracy__",data_set_name,".png",sep=""), width = 7, height = 7, units = "in", res = 75)
plot(as.numeric(distance),col="blue",lty=1)
par(new=TRUE)
plot(time_diff,col="black",lty=1)
par(new=TRUE)
plot(accuracy,col="red",lty=1)
title(main="compare distance, timeDiff and accuracy")
legend('topleft',
c("distance","time_diff","accuracy"),
col=c("blue","black","red"),
pch = c(21,21,NA),
lty=c(NA,NA,1),
cex=0.8
)
dev.off()
graphics.off()
png(filename = paste("distance_timeDiff_accuracy__",data_set_name,".png",sep=""), width = 7, height = 7, units = "in", res = 75)
plot(as.numeric(distance),col="blue",type = "l",lty=1)
par(new=TRUE)
plot(time_diff,col="black",type = "l",lty=1)
par(new=TRUE)
plot(accuracy,col="red",type = "l",lty=1)
title(main="compare distance, timeDiff and accuracy")
legend('topleft',
c("distance","time_diff","accuracy"),
col=c("blue","black","red"),
pch = c(21,21,NA),
lty=c(NA,NA,1),
cex=0.8
)
dev.off()
